package steps;

import io.cucumber.java.en.*;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import pages.DashboardPage;
import pages.KiotVietSalesPage;
import pages.LoginPage;
import pages.ProductPage;
import utils.DriverManager;

import java.time.Duration;

public class KiotVietSalesSteps {

    WebDriver driver = DriverManager.getDriver();
    KiotVietSalesPage salesPage = new KiotVietSalesPage(driver);
    LoginPage loginPage;
    ProductPage productPage;
    DashboardPage dashboardPage;

    @Given("nh√¢n vi√™n ƒëang ·ªü m√†n h√¨nh b√°n h√†ng KiotViet")
    public void nhanVienDangOManhinhBanHang() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

        // 1. M·ªü trang login v√† ƒëƒÉng nh·∫≠p
        loginPage = new LoginPage(driver);
        loginPage.open(); // -> m·ªü trang login (kh√¥ng c·∫ßn g·ªçi driver.get() th·ªß c√¥ng n·ªØa)
        loginPage.login("admin", "Kiotviet123456");

        // 2. ƒê√≥ng overlay n·∫øu c√≥
        productPage = new ProductPage(driver);
        productPage.closeOverlayIfPresent();

        // 3. Click v√†o n√∫t "B√°n h√†ng" ·ªü dashboard
        dashboardPage = new DashboardPage(driver);
        dashboardPage.clickBanHangButton();

        // 4. ƒê√≥ng popup gi·ªõi thi·ªáu n·∫øu c√≥
        salesPage = new KiotVietSalesPage(driver);
        salesPage.closeIntroOverlayIfPresent();

        // 5. Ch·ªù spinner loading bi·∫øn m·∫•t
        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("loading-bar-spinner")));

        // 6. Ch·ªù √¥ t√¨m ki·∫øm hi·ªÉn th·ªã
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("productSearchInput")));

        // 7. Click tab "B√°n th∆∞·ªùng" n·∫øu ch∆∞a ƒë∆∞·ª£c ch·ªçn
        salesPage.clickTabBanThuong();

        // 8. Ki·ªÉm tra URL + Ki·ªÉm tra √¥ t√¨m ki·∫øm c√≥ placeholder ƒë√∫ng
        String currentUrl = driver.getCurrentUrl().trim();
        String expectedUrl = "https://testz23.kiotviet.com/sale/#/";

        WebElement searchInput = driver.findElement(By.id("productSearchInput"));
        String actualPlaceholder = searchInput.getAttribute("placeholder");

        boolean isSalesScreenDisplayed = currentUrl.equals(expectedUrl)
                && searchInput.isDisplayed()
                && "T√¨m h√†ng h√≥a (F3)".equals(actualPlaceholder);

        Assert.assertTrue("‚ùå Kh√¥ng hi·ªÉn th·ªã m√†n h√¨nh b√°n h√†ng.\n" +
                        "üëâ ƒêang ·ªü URL: " + currentUrl +
                        "\nüîó Mong ƒë·ª£i: " + expectedUrl +
                        "\nüîç Placeholder: " + actualPlaceholder,
                isSalesScreenDisplayed);
    }


    @Given("c√≥ h√≥a ƒë∆°n {string} ƒëang m·ªü")
    public void coHoaDonDangMo(String invoiceName) {
        Assert.assertTrue("H√≥a ƒë∆°n kh√¥ng ƒë√∫ng", salesPage.isInvoiceActive(invoiceName));
    }

    @When("nh√¢n vi√™n click v√†o √¥ {string}")
    public void nhanVienClickVaoO(String fieldName) {
        // Field name c√≥ th·ªÉ d√πng ƒë·ªÉ x√°c th·ª±c th√™m n·∫øu c√≥ nhi·ªÅu √¥ nh·∫≠p
        salesPage.clickProductSearchBox();
    }

    @When("nh·∫≠p {string}")
    public void nhapTuKhoaTimKiem(String keyword) {
        salesPage.enterProductSearchTerm(keyword);
    }

    @When("nh·∫•n Enter ho·∫∑c ch·ªçn s·∫£n ph·∫©m t·ª´ dropdown")
    public void chonSanPhamTuDropdown() {
        salesPage.nhanEnterDeThemSanPham();  // m·ªõi
    }


    @Then("s·∫£n ph·∫©m {string} ƒë∆∞·ª£c th√™m v√†o h√≥a ƒë∆°n")
    public void sanPhamDuocThemVaoHoaDon(String tenSanPham) {
        boolean isDisplayed = salesPage.isProductDisplayed(
                tenSanPham,
                "8936131180934", // ho·∫∑c l·∫•y ƒë·ªông n·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m kh√°c nhau
                "25,000",
                1
        );
        Assert.assertTrue("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë√£ th√™m v√†o h√≥a ƒë∆°n", isDisplayed);
    }

    @Then("hi·ªÉn th·ªã m√£ v·∫°ch {string}")
    public void hienThiMaVach(String expectedBarcode) {
        Assert.assertTrue("Kh√¥ng hi·ªÉn th·ªã m√£ v·∫°ch", salesPage.isBarcodeVisible());
        String actualBarcode = salesPage.getLastAddedProductBarcode();
        Assert.assertEquals("M√£ v·∫°ch kh√¥ng ƒë√∫ng", expectedBarcode, actualBarcode);
    }

    @Then("s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† {int}")
    public void soLuongMacDinh(int expectedQuantity) {
        int actualQuantity = salesPage.getLastAddedProductQuantity();
        Assert.assertEquals("S·ªë l∆∞·ª£ng kh√¥ng ƒë√∫ng", expectedQuantity, actualQuantity);
    }

    @Then("gi√° b√°n hi·ªÉn th·ªã l√† {string}")
    public void giaBanHienThiLa(String expectedPriceText) {
        String actualPriceText = salesPage.getLastAddedProductPriceText();
        Assert.assertEquals("Gi√° b√°n kh√¥ng kh·ªõp", expectedPriceText, actualPriceText);
    }
}
